using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using Wikimedia.Utilities.Dtos;
using Wikimedia.Utilities.Interfaces;
using Wikimedia.Utilities.Models.WikidataQueries.DeathsPerDate;
using Wikimedia.Utilities.Models.WikidataQueries.SitelinksOfArticle;

namespace Wikimedia.Utilities.Services
{
    public class WikidataService : IWikidataService
    {
        private readonly HttpClient client;

        public WikidataService()
        {
            this.client = new HttpClient();
            client.DefaultRequestHeaders.Accept.Clear();
            // https://www.mediawiki.org/w/index.php?title=Topic:V1zau9rqd4ritpug&topic_showPostId=wiworqhh4r7p29x2#flow-post-wiworqhh4r7p29x2
            client.DefaultRequestHeaders.Add("User-Agent", "C# Application");
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/sparql-results+json")); // or "application/json"
        }

        public WikidataItemDto GetSitelinksResult(string article)
        {
            string uri = GetUrlWikidataQueryNumberOfSitelinks(article);
            var jsonString = client.GetStringAsync(uri).Result;
            var result = JsonConvert.DeserializeObject<ResultSitelinksOfArticle>(jsonString);

            return MapToItem(article, result.results.bindings);
        }

        private string GetUrlWikidataQueryNumberOfSitelinks(string article)
        {
            // A url-encoded query is returned. This query was generated by running the sparql SQL in https://query.wikidata.org/ and then selecting '</> code'; tab URL
            article = article.Replace(" ", "%20"); // you never know..

            return "https://query.wikidata.org/sparql?query=" +
                    "SELECT %20%3Fitem%20%3FitemLabel%20%3Farticle%20%3Fsitelinks%0A" +
                    "WHERE%20%0A%7B%0A%20VALUES%20%3Fsitelink%20%7B" +
                   $"%22{article}%22" +
                    "%40en%20%7D%20.%0A%20%3Farticle%20schema%3Aabout%20%3Fitem%20%3B%0A%20%20schema%3AisPartOf%20%3Chttps%3A%2F%2Fen.wikipedia.org%2F%3E%20%3B%20%0A%20%20schema%3Aname%20%3Fsitelink%20.%0A%20%3Fitem%20wikibase%3Asitelinks%20%3Fsitelinks%20.%0A%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%7D%0A%7D" +
                    "&format=json";

            /*  
               https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2021/12#Number_of_sitelinks_based_on_Wikipedia_article_name_(English) : 
               Number of sitelinks based on Wikipedia article name (English)
               
               SELECT ?item ?itemLabel ?article ?sitelinks
                WHERE 
                {
                  VALUES ?sitelink {"Arthur Rudolph"@en } .
                  ?article schema:about ?item ;
                           schema:isPartOf <https://en.wikipedia.org/> ; 
                           schema:name ?sitelink .
                  ?item wikibase:sitelinks ?sitelinks .
                  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
                }   
            */
        }

        public IEnumerable<WikidataItemDto> GetItemsPerDeathDate(DateTime deathDate)
        {
            string uri = GetUrlWikidataQueryDeceasedPerDate(deathDate);
            var jsonString = client.GetStringAsync(uri).Result;
            var result = JsonConvert.DeserializeObject<ResultDeathsPerDate>(jsonString);

            return MapToItem(result.results.bindings);
        }

        public DateTime ResolveDateOfBirth(WikidataItemDto wikiDataItemDto)
        {
            if (wikiDataItemDto.DateOfBirth == null)
                return DateTime.MinValue;

            return (DateTime)wikiDataItemDto.DateOfBirth;
        }

        public string ResolveItemLabel(WikidataItemDto wikiDataItemDto)
        {
            if (string.IsNullOrWhiteSpace(wikiDataItemDto.Label))
                return wikiDataItemDto.ArticleName;

            return wikiDataItemDto.Label;
        }

        public string ResolveItemDescription(WikidataItemDto wikiDataItemDto)
        {
            if (string.IsNullOrWhiteSpace(wikiDataItemDto.Description))
                return null;

            return wikiDataItemDto.Description;
        }

        public string ResolveItemCauseOfDeath(WikidataItemDto wikiDataItemDto)
        {
            if (string.IsNullOrEmpty(wikiDataItemDto.CauseOfDeath) && string.IsNullOrEmpty(wikiDataItemDto.MannerOfDeath))
                return null;

            if (string.IsNullOrEmpty(wikiDataItemDto.CauseOfDeath) && wikiDataItemDto.MannerOfDeath.Contains("natural causes", comparisonType: StringComparison.OrdinalIgnoreCase))
                return null;

            if (!string.IsNullOrEmpty(wikiDataItemDto.MannerOfDeath))
                if (wikiDataItemDto.MannerOfDeath.Contains("suicide", comparisonType: StringComparison.OrdinalIgnoreCase))
                {
                    return "suicide";
                }

            var causeOfDeath = (!string.IsNullOrEmpty(wikiDataItemDto.CauseOfDeath) ? wikiDataItemDto.CauseOfDeath : wikiDataItemDto.MannerOfDeath);

            if (causeOfDeath.Equals("disease", StringComparison.OrdinalIgnoreCase))
                return null;
            else
                return causeOfDeath;
        }

        public string ResolveBiolink(WikidataItemDto wikiDataItemDto)
        {
            return wikiDataItemDto.Label == wikiDataItemDto.ArticleName ? $"[[{wikiDataItemDto.Label}]]" : $"[[{wikiDataItemDto.ArticleName}|{wikiDataItemDto.Label}]]";
        }

        public string ResolveAge(WikidataItemDto wikiDataItemDto)
        {
            return wikiDataItemDto.DateOfBirth == null ? string.Empty : ResolveAge((DateTime)wikiDataItemDto.DateOfBirth, wikiDataItemDto.DateOfDeath).ToString() + ", ";
        }

        private int ResolveAge(DateTime dateOfBirth, DateTime date)
        {
            // Calculate the age.
            var age = date.Year - dateOfBirth.Year;

            // Go back to the year in which the person was born in case of a leap year
            if (dateOfBirth.Date > date.AddYears(-age)) age--;

            return age;
        }

        public string SanitizeDateOfDeathReferences(WikidataItemDto wikiDataItemDto)
        {
            if (string.IsNullOrEmpty(wikiDataItemDto.DateOfDeathRefs))
                return null;

            string dateOfDeathRefs = wikiDataItemDto.DateOfDeathRefs;

            // https://en.wikipedia.org/wiki/Wikipedia:Reliable_sources/Perennial_sources
            // Nope:
            // 'Find A Grave'
            //http://oxfordindex.oup.com The Oxford Index is no longer available
            // Discogs https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Albums/Sources#Generally_unreliable_sources

            // Unreliable sources
            dateOfDeathRefs = dateOfDeathRefs.Replace("Find A Grave", "xFaG", StringComparison.OrdinalIgnoreCase);
            dateOfDeathRefs = dateOfDeathRefs.Replace("Internet Movie Database", "xIMDB", StringComparison.OrdinalIgnoreCase);
            dateOfDeathRefs = dateOfDeathRefs.Replace("Encyclopaedia Metallum", "xEM", StringComparison.OrdinalIgnoreCase);
            dateOfDeathRefs = dateOfDeathRefs.Replace("Discogs", "xD", StringComparison.OrdinalIgnoreCase);
            dateOfDeathRefs = dateOfDeathRefs.Replace("The Peerage", "xP", StringComparison.OrdinalIgnoreCase);

            // Abbreviate other wiki's
            dateOfDeathRefs = dateOfDeathRefs.Replace("imported from Wikimedia project: ", string.Empty);
            dateOfDeathRefs = dateOfDeathRefs.Replace("English Wikipedia", "enwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Russian Wikipedia", "ruwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("French Wikipedia", "frwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Spanish Wikipedia", "eswiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("German Wikipedia", "dewiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Polish Wikipedia", "plwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Afrikaans Wikipedia", "afwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Japanese Wikipedia", "jawiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Croatian Wikipedia", "crwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Persian Wikipedia", "pswiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Dutch Wikipedia", "nlwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Italian Wikipedia", "itwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Kazakh Wikipedia", "kkwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Dutch Wikipedia", "nlwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("Dutch Wikipedia", "nlwiki");
            dateOfDeathRefs = dateOfDeathRefs.Replace("stated in: ", string.Empty, StringComparison.OrdinalIgnoreCase);

            return dateOfDeathRefs;
        }

        public string GetUrlWikidataQueryDeceasedPerDate(DateTime date)
        {
            /*
                An url-encoded query is returned. This query was generated by running the sparql SQL in https://query.wikidata.org/ and then selecting '</> code'; tab URL
                The query was shortened by removing duplicate spaces ('%20%20' -> '%20') and removing line feeds ('%0A' -> ''). Exceptions (not replaced):
                '%0AWITH'
                '%0AWHERE'
            */
            return @"https://query.wikidata.org/sparql?query=" +
                   @"SELECT%20%3Fitem%20%3Farticlename%20%3FitemLabel%20%3FitemDescription%20%3Fsl%20%3Fdob%20%3Fdod%20%3Fdod_refs%20%3Fcod%20%3Fmod%0AWITH%7B%20SELECT%20%3Fitem%20%3Fdod_stm%20%3Fdod%20(GROUP_CONCAT(CONCAT(%3Fdod_ref_propLabel%2C%20%22%3A%20%22%2C%20%3Fdod_ref_valueLabel)%3B%20" +
                   @"SEPARATOR%3D%22%7E%21%22" + // SEPARATOR="~!" = %22%7E%21%22
                   @")%20AS%20%3Fdod_refs)%20WHERE%20%7B%20VALUES%20%3Fdod%20%7B%22%2B" +
                   date.ToString("yyyy-MM-dd") +
                   @"%22%5E%5Exsd%3AdateTime%7D%20%3Fdod%20%5Ewdt%3AP570%20%3Fitem%20.%20%3Fitem%20wdt%3AP31%20wd%3AQ5%20.%20OPTIONAL%20%7B%20%3Fitem%20p%3AP570%20%3Fdod_stm%20.%20%3Fdod_stm%20ps%3AP570%20%3Fdod%20%3B%20psv%3AP570%20%5Bwikibase%3AtimePrecision%20%3Fdod_precision%5D.%20FILTER(%20%3Fdod_precision%20%3E%3D%20%2211%22%5E%5Exsd%3Ainteger%20)%20OPTIONAL%20%7B%20%3Fdod_stm%20prov%3AwasDerivedFrom%20%3Fdod_ref%20.%20%3Fdod_ref%20%3Fdod_ref_pr%20%3Fdod_ref_value%20.%20%3Fdod_ref_prop%20wikibase%3Areference%20%3Fdod_ref_pr%20.%20%7D%20%7D%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20.%20%3Fdod_ref_prop%20rdfs%3Alabel%20%3Fdod_ref_propLabel%20.%20%3Fdod_ref_value%20rdfs%3Alabel%20%3Fdod_ref_valueLabel%20.%20%7D%20%7D%20GROUP%20BY%20%3Fitem%20%3Fdod_stm%20%3Fdod%7D%20AS%20%25get_dod_refs%0AWITH%7B%20SELECT%20%3Fitem%20%3Fdod_stm%20%3Fdod%20%3Fdod_refs%20(GROUP_CONCAT(%3FcodLabel%3B%20SEPARATOR%3D%22%2C%20%22)%20AS%20%3Fcod)%20WHERE%20%7B%20INCLUDE%20%25get_dod_refs%20OPTIONAL%20%7B%20%3Fitem%20p%3AP509%20%3Fcod_stm%20.%20%3Fcod_stm%20ps%3AP509%20%3Fcod%20.%20%7D%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20.%20%3Fcod%20rdfs%3Alabel%20%3FcodLabel%20.%20%7D%20%7D%20GROUP%20BY%20%3Fitem%20%3Fdod_stm%20%3Fdod%20%3Fdod_refs%7D%20AS%20%25get_cod%0AWITH%7B%20SELECT%20%3Fitem%20%3Fdod_stm%20%3Fdod%20%3Fdod_refs%20%3Fcod%20(SAMPLE(%3FmodLabel)%20AS%20%3Fmod)%20WHERE%20%7B%20INCLUDE%20%25get_cod%20OPTIONAL%20%7B%20%3Fitem%20p%3AP1196%20%3Fmod_stm%20.%20%3Fmod_stm%20ps%3AP1196%20%3Fmod%20.%20%7D%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20.%20%3Fmod%20rdfs%3Alabel%20%3FmodLabel%20.%20%7D%20%7D%20GROUP%20BY%20%3Fitem%20%3Fdod_stm%20%3Fdod%20%3Fdod_refs%20%3Fcod%7D%20AS%20%25get_mod%0AWHERE%7B%20INCLUDE%20%25get_mod%20%3Fitem%20wikibase%3Asitelinks%20%3Fsl%20.%20%3Fitem%20%5Eschema%3Aabout%20%3Farticle%20.%20%3Farticle%20schema%3AisPartOf%20%3Chttps%3A%2F%2Fen.wikipedia.org%2F%3E%3B%20schema%3Aname%20%3Farticlename%20.%20OPTIONAL%20%7B%20%3Fitem%20wdt%3AP569%20%3Fdob%20%3B%20%20p%3AP569%20%3Fdob_stm%20.%20%3Fdob_stm%20ps%3AP569%20%3Fdob%20.%20%3Fdob_stm%20a%20wikibase%3ABestRank%20%7D%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20.%20%3Fitem%20rdfs%3Alabel%20%3FitemLabel%20.%20%3Fitem%20schema%3Adescription%20%3FitemDescription%20.%20%7D%20BIND(REPLACE(%3FitemLabel%2C%20%22%5E.*(%3F%3C!%20%5BVv%5D%5Bao%5Dn%7C%20%5BDd%5D%5Baeiu%5D%7C%20%5BDd%5D%5Be%5D%5Blns%5D%7C%20%5BLl%5D%5Bae%5D)%20(%3F!(%5BSJ%5Dr%5C%5C.%3F%7C%5BXVI%5D%2B)%24)%22%2C%20%22%22)%20AS%20%3Fsortname)%20%7D%20" +
                   @"ORDER%20BY%20ASC(UCASE(%3Fsortname))%20ASC(UCASE(%3FitemLabel))" +
                   @"&format=json";

            /* This  is the actual sparql SQL that is sent:
            See also wikidata.org for the original query            
            https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2021/12#Minor_issue_regarding_Humans_per_DoD_query :
             
SELECT
  ?item ?articlename ?itemLabel ?itemDescription ?sl ?dob
  ?dod ?dod_refs ?cod ?mod
WITH
{
  SELECT
    ?item ?dod_stm ?dod
    (GROUP_CONCAT(CONCAT(?dod_ref_propLabel, ": ", ?dod_ref_valueLabel); SEPARATOR="~!") AS ?dod_refs)
  WHERE
  {
    VALUES ?dod {"+1953-03-05"^^xsd:dateTime}
    ?dod ^wdt:P570 ?item .
    ?item wdt:P31 wd:Q5 .
    OPTIONAL
    {
      ?item p:P570 ?dod_stm .
      ?dod_stm ps:P570 ?dod ;
               psv:P570 [wikibase:timePrecision ?dod_precision].
      FILTER( ?dod_precision >= "11"^^xsd:integer )
      OPTIONAL
      {
        ?dod_stm prov:wasDerivedFrom ?dod_ref .
        ?dod_ref ?dod_ref_pr ?dod_ref_value .
        ?dod_ref_prop wikibase:reference ?dod_ref_pr .
      }
    }
    SERVICE wikibase:label
    {
      bd:serviceParam wikibase:language "en" .
      ?dod_ref_prop rdfs:label ?dod_ref_propLabel .
      ?dod_ref_value rdfs:label ?dod_ref_valueLabel .
    }
  }
  GROUP BY ?item ?dod_stm ?dod
} AS %get_dod_refs
WITH
{
  SELECT
    ?item ?dod_stm ?dod ?dod_refs (GROUP_CONCAT(?codLabel; SEPARATOR=", ") AS ?cod)
  WHERE
  {
    INCLUDE %get_dod_refs
    OPTIONAL
    {
      ?item p:P509 ?cod_stm .
      ?cod_stm ps:P509 ?cod .
    }
    SERVICE wikibase:label
    {
      bd:serviceParam wikibase:language "en" .
      ?cod rdfs:label ?codLabel .
    }
  }
  GROUP BY ?item ?dod_stm ?dod ?dod_refs
} AS %get_cod
WITH
{
  SELECT
    ?item ?dod_stm ?dod ?dod_refs ?cod (SAMPLE(?modLabel) AS ?mod)
  WHERE
  {
    INCLUDE %get_cod
    OPTIONAL
    {
      ?item p:P1196 ?mod_stm .
      ?mod_stm ps:P1196 ?mod .
    }
    SERVICE wikibase:label
    {
      bd:serviceParam wikibase:language "en" .
      ?mod rdfs:label ?modLabel .
    }
  }
  GROUP BY ?item ?dod_stm ?dod ?dod_refs ?cod
} AS %get_mod
WHERE
{
  INCLUDE %get_mod
  ?item wikibase:sitelinks ?sl .
  ?item ^schema:about ?article .
  ?article schema:isPartOf <https://en.wikipedia.org/> ;
           schema:name ?articlename .
  OPTIONAL { ?item wdt:P569 ?dob ;
                   p:P569 ?dob_stm .
             ?dob_stm ps:P569 ?dob .
             ?dob_stm a wikibase:BestRank
           }
  SERVICE wikibase:label
    {
      bd:serviceParam wikibase:language "en" .
      ?item rdfs:label ?itemLabel .
      ?item schema:description ?itemDescription .
    }
  BIND(REPLACE(?itemLabel, "^.*(?<! [Vv][ao]n| [Dd][aeiu]| [Dd][e][lns]| [Ll][ae]) (?!([SJ]r\\.?|[XVI]+)$)", "") AS ?sortname)  
} ORDER BY ASC(UCASE(?sortname)) ASC(UCASE(?itemLabel))


         NB: If you replace the first WHERE-clause (UP TO the first OPTIONAL) with the WHERE-clause stated in GetUrlWikidataQueryNumberOfSitelinks(..)
             then obviously the result will be the same data based on article name instead of date of death;
...
  WHERE
  {
    VALUES ?sitelink { "Phillip Reed"@en  } .
  ?article schema:about ?item ;
  schema:isPartOf <https://en.wikipedia.org/> ; 
  schema:name ?sitelink .
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
    OPTIONAL
    {
      ?item p:P570 ?dod_stm .
      ?dod_stm ps:P570 ?dod ;
...
            */
        }
        private WikidataItemDto MapToItem(string article, Models.WikidataQueries.SitelinksOfArticle.Binding[] bindings)
        {
            var binding = bindings.SingleOrDefault(); // Exception if not exactly 1 binding as result

            return new WikidataItemDto
            {
                ArticleName = article,
                Label = binding.itemLabel?.value,
                Uri = binding.item.value,
                SiteLinksCount = int.Parse(binding.sitelinks.value)
            };
        }

        private IEnumerable<WikidataItemDto> MapToItem(Models.WikidataQueries.DeathsPerDate.Binding[] bindings)
        {
            var items = new List<WikidataItemDto>();

            foreach (var binding in bindings)
            {
                items.Add(
                    new WikidataItemDto
                    {
                        ArticleName = binding.articlename?.value,
                        Label = binding.itemLabel?.value,
                        Description = binding.itemDescription?.value,
                        Uri = binding.item.value,
                        SiteLinksCount = int.Parse(binding.sl.value),
                        DateOfBirth = binding.dob?.value,
                        DateOfDeath = binding.dod.value,
                        DateOfDeathRefs = binding.dod_refs?.value,
                        CauseOfDeath = binding.cod?.value,
                        MannerOfDeath = binding.mod?.value,
                    });
            }
            return items;
        }
    }
}

